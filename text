String wantedPortName = "/dev/tty1";
		@SuppressWarnings("rawtypes")
		Enumeration portIdentifiers = CommPortIdentifier.getPortIdentifiers();
		
		CommPortIdentifier portId = null;  // will be set if port found
		while (portIdentifiers.hasMoreElements())
		{
		    CommPortIdentifier pid = (CommPortIdentifier) portIdentifiers.nextElement();
		    if(pid.getPortType() == CommPortIdentifier.PORT_SERIAL &&
		       pid.getName().equals(wantedPortName)) 
		    {
		        portId = pid;
		        break;
		    }
		}
		if(portId == null)
		{
		    System.err.println("Could not find serial port " + wantedPortName);
		    System.exit(1);
		}
		SerialPort port = null;
		try {
		    port = (SerialPort) portId.open(
		        "name", // Name of the application asking for the port 
		        10000   // Wait max. 10 sec. to acquire port
		    );
		} catch(PortInUseException e) {
		    System.err.println("Port already in use: " + e);
		    System.exit(1);
		}
		
		port.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);

		BufferedReader is = null;  // for demo purposes only. A stream would be more typical.
		PrintStream    os = null;

		try {
		  is = new BufferedReader(new InputStreamReader(port.getInputStream()));
		} catch (IOException e) {
		  System.err.println("Can't open input stream: write-only");
		  is = null;
		}
		
		os = new PrintStream(port.getOutputStream(), true);
		
		if (is != null) is.close();
		if (os != null) os.close();
		if (port != null) port.close();
		
		os.print("AT");
		os.print("\r\n"); // Append a carriage return with a line feed

		is.readLine(); // First read will contain the echoed command you sent to it. In this case: "AT"
		is.readLine(); // Second read will remove the extra line feed that AT generates as output

		String response = is.readLine(); // if you sent "AT" then response == "OK"
		
		System.out.println(response);